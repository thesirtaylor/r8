// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: searchengine.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "searchengine";

export interface SearchRequest {
  q: string;
  type?: string | undefined;
}

export interface SearchResponse {
  data: RateEntitySearchResult[];
}

export interface RateEntitySearchResult {
  id: string;
  name: string;
  type: string;
  street: string;
  city: string;
  state: string;
  country: string;
  googlePlaceId: string;
  socials: { [key: string]: string };
  latitude: number;
  longitude: number;
}

export interface RateEntitySearchResult_SocialsEntry {
  key: string;
  value: string;
}

export const SEARCHENGINE_PACKAGE_NAME = "searchengine";

export interface SearchEngineServiceClient {
  search(request: SearchRequest): Observable<SearchResponse>;
}

export interface SearchEngineServiceController {
  search(request: SearchRequest): Promise<SearchResponse> | Observable<SearchResponse> | SearchResponse;
}

export function SearchEngineServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["search"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SearchEngineService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SearchEngineService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SEARCH_ENGINE_SERVICE_NAME = "SearchEngineService";
